name: Deploy to TestFlight

on:
  # Uncomment to enable a nightly build
  # schedule:
  #   - cron: '0 2 * * 1-5' # run on weekdays at 2 AM UTC

  # Show a manual trigger button in the GitHub Actions UI
  workflow_dispatch:

  # Trigger on pushes to release branches
  push:
    branches:
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  XCODE_PROJECT: TemplateApp.xcodeproj
  SCHEME: TemplateApp
  ARCHIVE_PATH: TemplateApp.xcarchive
  EXPORT_OPTIONS_PLIST: ExportOptions.plist

jobs:
  build:
    name: Deploy to TestFlight
    # To use the self-hosted runner, change to `runs-on: [self-hosted, macOS]`
    runs-on: [macos-26]

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '26'

    - name: Trust Xcode package plugins and macros
      run: |
        defaults write com.apple.dt.Xcode IDESkipPackagePluginFingerprintValidatation -bool YES
        defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES

    # Uncomment when using Cocoapods (legacy). Don't forget to change the `-project` flag to `-workspace` in the xcodebuild commands below.
    # - name: Cache Cocoapods
    #   uses: actions/cache@v4
    #   id: cocoapods-cache
    #   with:
    #     path: Pods
    #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-pods-

    # - name: Install Cocoapods
    #   if: steps.cocoapods-cache.outputs.cache-hit != 'true'
    #   run: |
    #     pod install

    - name: Cache Swift Package Manager dependencies
      uses: actions/cache@v4
      with:
        path: ${{ runner.temp }}/SourcePackages
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Install Swift packages
      run: |
        xcodebuild -project "${{ env.XCODE_PROJECT }}" \
          -scheme "${{ env.SCHEME }}" \
          -onlyUsePackageVersionsFromResolvedFile \
          -resolvePackageDependencies \
          -clonedSourcePackagesDirPath "${{ runner.temp }}/SourcePackages"

    - name: Install code signing certificate
      uses: "./.github/actions/code-signing-setup"
      with:
        build-certificate-base64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}
        keychain-password: ${{ secrets.KEYCHAIN_PASSWORD }}

    - name: Install App Store Connect API key
      run: |
        APP_STORE_CONNECT_API_KEY_PATH="${{ runner.temp }}/AuthKey.p8"
        echo "APP_STORE_CONNECT_API_KEY_PATH=$APP_STORE_CONNECT_API_KEY_PATH" >> $GITHUB_ENV
        echo -n "${{ secrets.APP_STORE_CONNECT_API_KEY_BASE64 }}" | base64 --decode -o "$APP_STORE_CONNECT_API_KEY_PATH"

    - name: Archive build
      run: |
        xcodebuild clean archive \
          -project "${{ env.XCODE_PROJECT }}"
          -scheme "${{ env.SCHEME }}" \
          -destination generic/platform=iOS \
          -archivePath "${{ runner.temp }}/${{ env.ARCHIVE_PATH }}" \
          -allowProvisioningUpdates \
          -authenticationKeyPath "${{ env.APP_STORE_CONNECT_API_KEY_PATH }}" \
          -authenticationKeyID ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
          -authenticationKeyIssuerID ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
          -clonedSourcePackagesDirPath "${{ runner.temp }}/SourcePackages" \
          -disableAutomaticPackageResolution

    - name: Upload to TestFlight
      run: |
        xcodebuild -exportArchive \
          -allowProvisioningUpdates \
          -authenticationKeyPath "${{ env.APP_STORE_CONNECT_API_KEY_PATH }}" \
          -authenticationKeyID ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} \
          -authenticationKeyIssuerID ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} \
          -archivePath "${{ runner.temp }}/${{ env.ARCHIVE_PATH }}" \
          -exportPath ${{ env.ARCHIVE_PATH }} \
          -exportOptionsPlist ${{ env.EXPORT_OPTIONS_PLIST }}

    # To add Crashlytics dSYM upload, grap the `upload-symbols` script from the Firebase SDK from here:
    # https://github.com/firebase/firebase-ios-sdk/blob/main/Crashlytics/upload-symbols
    # and add it to the repository in a folder called `scripts`. Then uncomment the following lines:

    # - name: Upload dSYM files to Firebase Crashlytics
    #   run: |
    #     ./scripts/upload-symbols -p ios \
    #       -gsp "TemplateApp/GoogleService-Info.plist" \
    #       "${{ runner.temp }}/${{ env.ARCHIVE_PATH }}/dSYMs"

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SCHEME }}-${{ github.sha }}.xcarchive
        path: ${{ runner.temp }}/${{ env.ARCHIVE_PATH }}
